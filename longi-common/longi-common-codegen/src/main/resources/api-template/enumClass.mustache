  /**
   * {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
   * @author {{devAuthor}}
   */
  public enum {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} {
    {{#gson}}
        {{#allowableValues}}
            {{#enumVars}}
    @SerializedName({{#isInteger}}"{{/isInteger}}{{#isDouble}}"{{/isDouble}}{{#isLong}}"{{/isLong}}{{#isFloat}}"{{/isFloat}}{{{value}}}{{#isInteger}}"{{/isInteger}}{{#isDouble}}"{{/isDouble}}{{#isLong}}"{{/isLong}}{{#isFloat}}"{{/isFloat}})
    /**
    *  {{{enumDescription}}}
    */
    {{{name}}}({{{value}}},"{{{enumDescription}}}"){{^-last}},
    {{/-last}}{{#-last}};{{/-last}}
            {{/enumVars}}
        {{/allowableValues}}
    {{/gson}}
    {{^gson}}
        {{#allowableValues}}
            {{#enumVars}}
    /**
    *  {{{enumDescription}}}
    */
    {{{name}}}({{{value}}},"{{{enumDescription}}}"){{^-last}},
    {{/-last}}{{#-last}};{{/-last}}
            {{/enumVars}}
        {{/allowableValues}}
    {{/gson}}

    private {{{dataType}}} value;
    private String description;

    {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}({{{dataType}}} value, String description) {
      this.value = value;
      this.description = description;
    }

    {{#jackson}}
    @JsonValue
    {{/jackson}}
    public {{{dataType}}} getValue() {
      return value;
    }

    public String getDescription() {
      return description;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} fromValue({{{dataType}}} value) {
      for ({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      {{#isNullable}}return null;{{/isNullable}}{{^isNullable}}throw new IllegalArgumentException("Unexpected value '" + value + "'");{{/isNullable}}
    }
  }
