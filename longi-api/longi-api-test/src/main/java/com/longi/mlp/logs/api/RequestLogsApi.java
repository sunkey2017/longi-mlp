/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.longi.mlp.logs.api;

import com.longi.mlp.core.bean.ResponseWrap;
import com.longi.mlp.logs.enums.LogQueryInterval;
import com.longi.mlp.logs.model.ApiRequestIntervalLog;
import com.longi.mlp.logs.model.ApiRequestLogDetail;
import com.longi.mlp.logs.model.ApiRequestLogSummary;

import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

import javax.validation.Valid;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/**
 * @author gaofan
 */

@Validated
@Api(value = "RequestLogs")
public interface RequestLogsApi {

    /**
     * GET /apis/intervalLogs : 片段性获取api接口请求日志
     * 根据参数，过滤查询获取api接口请求日志 
     *
     * @param queryInterval 查询时段类型 (optional)
     * @param timePeriod 时间段 (optional)
     * @param serviceId 服务编号 (optional)
     * @return 阶段性请求日志列表 (status code 200)
     */
    @ApiOperation(value = "片段性获取api接口请求日志", nickname = "getIntervalRequestLogs", notes = "根据参数，过滤查询获取api接口请求日志 ", response = ApiRequestIntervalLog.class, responseContainer = "List", tags = {"requestLogs",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "阶段性请求日志列表", response = ApiRequestIntervalLog.class, responseContainer = "List")})
    @RequestMapping(value = "/apis/intervalLogs",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseWrap<List<ApiRequestIntervalLog>> getIntervalRequestLogs(
            @ApiParam(value = "查询时段类型", allowableValues = "HOUR, DAY, MONTH") @Valid @RequestParam(value = "queryInterval", required = false) LogQueryInterval queryInterval,
            @ApiParam(value = "时间段") @Valid @RequestParam(value = "timePeriod", required = false) Double timePeriod,
            @ApiParam(value = "服务编号") @Valid @RequestParam(value = "serviceId", required = false) String serviceId
    );


    /**
     * GET /apis/logs/{logId} : 根据编号获取api接口请求日志
     * 根据编号获取api接口请求日志 
     *
     * @param logId 日志编码 (required)
     * @return API请求日志 (status code 200)
     */
    @ApiOperation(value = "根据编号获取api接口请求日志", nickname = "getRequestLogById", notes = "根据编号获取api接口请求日志 ", response = ApiRequestLogDetail.class, tags = {"requestLogs",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "API请求日志", response = ApiRequestLogDetail.class)})
    @RequestMapping(value = "/apis/logs/{logId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseWrap<ApiRequestLogDetail> getRequestLogById(
            @ApiParam(value = "日志编码", required = true) @PathVariable("logId") String logId
    );


    /**
     * GET /apis/logs : 获取api接口请求日志
     * 根据参数，过滤查询获取api接口请求日志 
     *
     * @param successFlag 是否成功标示 (optional)
     * @param beginAt 开始时间 (optional)
     * @param endAt 结束时间 (optional)
     * @param timeInterval 日志查询时间间隔，秒为单位 (optional)
     * @param serviceId 服务编号 (optional)
     * @return 请求日志列表 (status code 200)
     */
    @ApiOperation(value = "获取api接口请求日志", nickname = "getRequestLogs", notes = "根据参数，过滤查询获取api接口请求日志 ", response = ApiRequestLogSummary.class, tags = {"requestLogs",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "请求日志列表", response = ApiRequestLogSummary.class)})
    @RequestMapping(value = "/apis/logs",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseWrap<ApiRequestLogSummary> getRequestLogs(
            @ApiParam(value = "是否成功标示") @Valid @RequestParam(value = "successFlag", required = false) Integer successFlag,
            @ApiParam(value = "开始时间") @Valid @RequestParam(value = "beginAt", required = false) String beginAt,
            @ApiParam(value = "结束时间") @Valid @RequestParam(value = "endAt", required = false) String endAt,
            @ApiParam(value = "日志查询时间间隔，秒为单位") @Valid @RequestParam(value = "timeInterval", required = false) Integer timeInterval,
            @ApiParam(value = "服务编号") @Valid @RequestParam(value = "serviceId", required = false) String serviceId
    );

}
